Environment variables
---------------------

Let's say you're writing an open source project that uses photos from Facebook. Your code will need to use a secret key that will give you access to Facebook. This key is secret and you shouldn't share it with anyone. However, you want to share your open source code on Github. How should you do it?

Put your secret key in an environment variable and then read it from your code when you need it. For example:

$ export SECRET_KEY=12345abcde <- create an env var called SECRET_KEY

Then, in your Ruby code, read the value:

secret_key = ENV['SECRET_KEY']


Profile files
-------------

The environment variables don't last for long. After you set them, they only stay in the environment until the end of the current shell session. However, you normally want them being available in all new shell sessions as well. Profile files are often used to achieve this.

cat ~/.bash_profile <- to print contents of .bash_profile file

We can also use the same file to create "permanent" env vars...

$ echo "export SEASON=winter" >> ~/.bash_profile
(Double angle bracket means append, while single angle bracket means overwrite)


man and git help
----------------

$ git --help COMMAND

$ man COMMAND (for any terminal command)

$ touch FILENAME (the "touch" command creates an empty file with a given name)


mastery-quizzes
---------------

In module 3, we found out that we could instruct objects to do things using messages.
Objects might require arguments to be able to answer a message.
We learned that the list of messages we can send to an object is called its interface.
We saw that you could make a good guess at what an object was, based on the methods defined on its interface.
We also saw that you can chain messages, thanks to referential transparency.

Messages call methods on an object's interface.


Abstract Syntax Tree
--------------------

Ruby will translate code statements like if 1 < 0; else... into something very similar to the flowchart we made: an Abstract Syntax Tree.
Being able to deconstruct code into similar structures – whether you verbalise them, draw them out, or something else – is a crucial part of learning to work with code.


Classes
-------

We've seen so far that the 'class' keyword is shorthand for "open up this class, and do things with it".
It's actually a bit cleverer than this. If the class given to class doesn't exist, it will be made on-the-fly.

| def colour=(colour) (notes actually wrote it like "def colour=(colour)", but second example didn't include the '=')
|   @colour = colour ('@colour' makes it an instance variable that can be used by other methods in that class)
| end

| def observe
|   return "You see a " + @colour + " dog."
| end

above allows us to set a method (setters) that sets a property value (object state) on a class instance

could be called as...
| woman.name=("Yasmin")
| woman.name("Yasmin")
| woman.name = "Yasmin"

N.B.
- Chapter10
    - Inconsistency in some syntax -> Dog class types colour method as…
        - def colour=(colour) (but I can’t see the need for the ‘=’)
        - Second example Person give_a_name method doesn’t use the ‘=’
        - Then goes back to name=(name) in a later example
            - Would be useful to know if this syntax around setters is an important differentiation
            - Not getting much clarity from searching this either
            - I think it depends how it is called…
                - If called like woman.name(“Yasmin”) it would need to be def name=(name)
                - If called as woman.name = “Yasmin" it could be def name(name)
                - (Although playing with this it doesn't seem to matter!)
                - (Just a convention then?)


In Ruby, whenever we call new on a class, that class builds an object and then runs the method initialize on it:
If we want to store information about an object as part of that object's state,
as a property on the object, we need to interfere with this initialize method.

Ruby automatically defines the initialize method, even if you don't write it.
That's why new still worked for our Dog, Person, and Robot classes before.
Every argument to the new function is passed to the initialize function (and no setter method is needed).

class Person
  def initialize(name) <- no '=' in here!
    @name = name
  end

  def introduce
    return "Hello, I'm " + @name
  end
end

woman = Person.new("Yasmin")
woman.introduce